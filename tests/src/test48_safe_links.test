#! /bin/sh

# Test that the --safe-links option works as expected.

set -e
set -u

. ${tstdir-.}/lib.sh
. ${tstdir-.}/conf.sh

# Create the source tree containing no
# out-of-tree symlinks:
#
rm -rf src
mkdir -p src/dir

for c in a b y z ; do
    date > src/${c}file
    ln -s ${c}file src/${c}sym

    date > src/dir/${c}file
    ln -s ${c}file src/dir/${c}sym
    ln -s ../${c}file src/dir/${c}sym2
done

# Create the reference tree from the source tree:
#
rm -rf ref
cp -a src ref
compare_trees -t src ref

# Create some out-of-tree symlinks in the source tree:
#
#ln -s /tmp/foobie-bletch src/tmp
#ln -s /root/foobie-bletch src/root

ln -s ../src/${c}file src/${c}sym2
ln -s ../../src/${c}file src/dir/${c}sym3

date > file
ln -s ../file src/sym4
ln -s ../../file src/dir/sym5


# A simple rsync should copy all in/out-of-tree symlinks
# exactly as they are (whether or not the dest dir exists):
#
rm -rf dst

for i in $(seq 2) ; do
    rsync -a -- src/ dst/
    compare_trees -t src dst

    # Check that the contents of all symlinks were transferred
    # successfully:
    #
    find src -type l | while read sfile ; do
	dfile=$(echo ${sfile} | sed 's/^src/dst/')
	slink=$(readlink ${sfile})
	dlink=$(readlink ${dfile})
	[ "${slink}" == "${dlink}" ]
    done
done


# Check that valid unsafe links are not removed
# from the dest dir:
#
rsync -a --safe-links --delete -- src/ dst/
compare_trees -t src dst


# Check that dangling unsafe links are not removed
# from the dest dir:
#
rm file
rsync -a --safe-links --delete -- src/ dst/
compare_trees -t src dst


# Check that only safe links are copied to a non-existent
# dest dir:
#
rm -rf dst

ln -s /tmp src/tmp
ln -s /tmp src/dir/tmp
ln -s /root src/root
ln -s /root src/dir/root

touch src ref src/dir ref/dir

for i in $(seq 2) ; do
    rsync -a --safe-links -- src/ dst/
    compare_trees -t ref dst
done
